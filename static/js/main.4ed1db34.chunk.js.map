{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","id","name","comment","className","src","alt","CardList","comments","map","el","i","key","body","SearchBox","onSearchChange","type","onChange","placeholder","ErrorBoundry","props","state","hasError","this","setState","children","Component","Scroll","style","overflowY","borderTop","height","App","Comments","onRequestComments","searchField","filtered","filter","toLowerCase","includes","length","icon","faSpinner","spin","connect","searchComments","isPending","requestComments","Error","error","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","fetchComments","searchInitState","commentsInitState","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4ed1db34.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./../containers/Style.css\";\n\nconst Card = ({ id, name, comment }) => {\n  return (\n    <div className=\"card\">\n      <img\n        src={`https://robohash.org/${id}?size=100x100`}\n        alt=\"Robot\"\n        className=\"card__img\"\n      />\n      <div className=\"card__content\">\n        <h2 className=\"card__author\">{name}</h2>\n        <p className=\"card__text\">{comment}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ comments }) => {\n  return comments.map((el, i) => {\n    return (\n      <Card\n        key={i}\n        id={comments[i].id}\n        name={comments[i].name}\n        comment={comments[i].body}\n      />\n    );\n  });\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./../containers/Style.css\";\n\nconst SearchBox = ({ onSearchChange }) => {\n  return (\n    <div>\n      <input\n        type=\"search\"\n        onChange={onSearchChange}\n        placeholder=\"search...\"\n        className=\"searchBox\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1 className=\"Error\">Opps!!!! that is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        borderTop: \"1px solid #f1f1f1\",\n        height: \"90vh\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport Scroll from \"../components/Scroll\";\n\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport { setSearchField, fetchComments } from \"../actions\";\n\nimport \"./Style.css\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchComments.searchField,\n    isPending: state.requestComments.isPending,\n    Comments: state.requestComments.comments,\n    Error: state.requestComments.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestComments: () => fetchComments(dispatch),\n  };\n};\n\nclass App extends Component {\n  state = {\n    Comments: [],\n  };\n\n  componentDidMount() {\n    this.props.onRequestComments();\n  }\n\n  render() {\n    const { searchField, onSearchChange, Comments } = this.props;\n    const filtered = Comments.filter((comment) => {\n      return comment.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className=\"container tc\">\n        <header className=\"header\">\n          <h3 className=\"header__text\">Commentify</h3>\n          <SearchBox onSearchChange={onSearchChange} />\n        </header>\n        <ErrorBoundry>\n          <Scroll>\n            {filtered.length > 0 ? (\n              <CardList comments={filtered} />\n            ) : (\n              <div className=\"loading\">\n                <FontAwesomeIcon\n                  icon={faSpinner}\n                  className=\"loading__icon\"\n                  spin\n                />\n              </div>\n            )}\n          </Scroll>\n        </ErrorBoundry>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\n\nimport { REQUEST_COMMENTS_PENDING } from \"./constants\";\nimport { REQUEST_COMMENTS_SUCCESS } from \"./constants\";\nimport { REQUEST_COMMENTS_FAILED } from \"./constants\";\n\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text,\n  };\n};\n\nexport const fetchComments = (dispatch) => {\n  dispatch({ type: REQUEST_COMMENTS_PENDING });\n  fetch(\"https://api.mocki.io/v1/90c0d5c4\")\n    .then((res) => res.json())\n    .then((data) => {\n      dispatch({ type: REQUEST_COMMENTS_SUCCESS, payload: data });\n    })\n    .catch((error) => {\n      dispatch({ type: REQUEST_COMMENTS_FAILED, payload: error });\n    });\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_COMMENTS_PENDING = \"REQUEST_COMMENTS_PENDING\";\nexport const REQUEST_COMMENTS_SUCCESS = \"REQUEST_COMMENTS_SUCCESS\";\nexport const REQUEST_COMMENTS_FAILED = \"REQUEST_COMMENTS_FAILED\";\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\n\nimport { REQUEST_COMMENTS_PENDING } from \"./constants\";\nimport { REQUEST_COMMENTS_SUCCESS } from \"./constants\";\nimport { REQUEST_COMMENTS_FAILED } from \"./constants\";\n\nconst searchInitState = {\n  searchField: \"\",\n};\n\nexport const searchComments = (state = searchInitState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst commentsInitState = {\n  isPending: false,\n  comments: [],\n  error: \"\",\n};\n\nexport const requestComments = (state = commentsInitState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_COMMENTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_COMMENTS_SUCCESS:\n      return Object.assign({}, state, {\n        isPending: false,\n        comments: action.payload,\n      });\n    case REQUEST_COMMENTS_FAILED:\n      return Object.assign({}, state, {\n        isPending: false,\n        comments: [],\n        error: action.payload,\n      });\n    default:\n      return state;\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport thunkMiddleWare from \"redux-thunk\";\nimport App from \"./containers/App\";\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport { createLogger } from \"redux-logger\";\nimport { searchComments, requestComments } from \"./reducers\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchComments, requestComments });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleWare, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}